-- Drop existing tables if they exist
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE ParkingRecord CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE ParkingLot CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Users CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Vehicles CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE VisitorPasses CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Violations CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Payments CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Staff CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- Create Users table
CREATE TABLE Users (
    ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PHONE VARCHAR2(20) UNIQUE NOT NULL,
    PASSWORD VARCHAR2(100) NOT NULL,
    NAME VARCHAR2(100) NOT NULL,
    ROLE VARCHAR2(20) NOT NULL,
    USER_TYPE VARCHAR2(20) NOT NULL,
    UNIT_NUMBER NUMBER,
    HOST_INFORMATION VARCHAR2(200),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT chk_role CHECK (ROLE IN ('admin', 'user')),
    CONSTRAINT chk_user_type CHECK (USER_TYPE IN ('resident', 'visitor'))
);

-- Insert test users
INSERT INTO Users (PHONE, PASSWORD, NAME, ROLE, USER_TYPE) VALUES
('1234567890', 'password', 'Admin User', 'admin', 'resident');

INSERT INTO Users (PHONE, PASSWORD, NAME, ROLE, USER_TYPE, UNIT_NUMBER) VALUES
('9876543210', 'password', 'Resident User', 'user', 'resident', 101);

-- INSERT INTO Users(NAME,PHONE,PASSWORD,USER_TYPE,UNIT_NUMBER,HOST_INFORMATION,ROLE)
--              VALUES('hello','1111111111','password','resident',100,'s','user');

-- Create ParkingLot table
CREATE TABLE ParkingLot (
    LOT_ID VARCHAR2(1) PRIMARY KEY,
    TOTAL_SPACES NUMBER NOT NULL,
    AVAILABLE_SPACES NUMBER NOT NULL
);

-- Insert test parking lot
INSERT INTO ParkingLot (LOT_ID, TOTAL_SPACES, AVAILABLE_SPACES) VALUES
('A', 100, 100);

-- Create ParkingRecord table
CREATE TABLE ParkingRecord (
    RECORD_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    VEHICLE_PLATE VARCHAR2(20) NOT NULL,
    LOT_ID VARCHAR2(1),
    ENTRY_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    EXIT_TIME TIMESTAMP,
    STATUS VARCHAR2(20) DEFAULT 'active',
    CONSTRAINT fk_lot_id FOREIGN KEY (LOT_ID) REFERENCES ParkingLot(LOT_ID),
    CONSTRAINT chk_status CHECK (STATUS IN ('active', 'completed', 'violation'))
);


-- Create Vehicles table
CREATE TABLE Vehicles (
    VEHICLE_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    PROVINCE VARCHAR2(10) NOT NULL,
    LICENSE_PLATE VARCHAR2(20) NOT NULL,
    PARKING_UNTIL TIMESTAMP NOT NULL,
    CURRENT_LOT_ID VARCHAR2(1),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_vehicles_user_id FOREIGN KEY (USER_ID) REFERENCES Users(ID),
    CONSTRAINT fk_vehicles_lot_id FOREIGN KEY (CURRENT_LOT_ID) REFERENCES ParkingLot(LOT_ID),
    CONSTRAINT unique_license_plate UNIQUE (PROVINCE, LICENSE_PLATE)
);

-- Create VisitorPasses table
CREATE TABLE VisitorPasses (
    PASS_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    VALID_TIME TIMESTAMP NOT NULL,
    STATUS VARCHAR2(20) DEFAULT 'active',
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_visitor_passes_user_id FOREIGN KEY (USER_ID) REFERENCES Users(ID),
    CONSTRAINT chk_visitor_pass_status CHECK (STATUS IN ('active', 'expired'))
);

-- Create Violations table
CREATE TABLE Violations (
    TICKET_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    LOT_ID VARCHAR2(1) NOT NULL,
    PROVINCE VARCHAR2(10) NOT NULL,
    LICENSE_PLATE VARCHAR2(20) NOT NULL,
    REASON VARCHAR2(200) NOT NULL,
    TIME TIMESTAMP NOT NULL,
    STATUS VARCHAR2(20) DEFAULT 'pending',
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_violations_lot_id FOREIGN KEY (LOT_ID) REFERENCES ParkingLot(LOT_ID),
    CONSTRAINT chk_violation_status CHECK (STATUS IN ('pending', 'paid', 'appealed'))
);

-- Create Payments table
CREATE TABLE Payments (
    PAY_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    AMOUNT NUMBER(10,2) NOT NULL,
    PAYMENT_METHOD VARCHAR2(50) NOT NULL,
    CARD_NUMBER VARCHAR2(20) NOT NULL,
    LOT_ID VARCHAR2(1),
    TICKET_ID NUMBER,
    STATUS VARCHAR2(20) DEFAULT 'pending',
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_payments_user_id FOREIGN KEY (USER_ID) REFERENCES Users(ID),
    CONSTRAINT fk_payments_lot_id FOREIGN KEY (LOT_ID) REFERENCES ParkingLot(LOT_ID),
    CONSTRAINT fk_payments_ticket_id FOREIGN KEY (TICKET_ID) REFERENCES Violations(TICKET_ID),
    CONSTRAINT chk_payment_status CHECK (STATUS IN ('completed', 'pending', 'failed'))
);

-- Create Staff table
CREATE TABLE Staff (
    STAFF_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    LOT_ID VARCHAR2(1) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_staff_user_id FOREIGN KEY (USER_ID) REFERENCES Users(ID),
    CONSTRAINT fk_staff_lot_id FOREIGN KEY (LOT_ID) REFERENCES ParkingLot(LOT_ID)
);

-- Insert test staff
INSERT INTO Staff (USER_ID, LOT_ID) 
SELECT ID, 'A' FROM Users WHERE ROLE = 'admin';

-- Commit the changes
COMMIT; 